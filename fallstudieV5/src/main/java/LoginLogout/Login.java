package LoginLogout;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.swing.JOptionPane;

//import com.mysql.jdbc.PreparedStatement;
//import com.mysql.jdbc.*;

import Seiten.MeineZeiten_Seite;
import Seiten.Uebersicht_Seite;
import dashboard.Fallstudie;
import dashboard.FallstudieE;
import dashboard.Home;

public class Login extends javax.swing.JFrame {

	public static String username;
    static int tage;

    public Login() {
        initComponents();
        setLocationRelativeTo(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hintergrund = new javax.swing.JPanel();
        loginfenster = new Komponenten.RundesPanel();
        Ueberschrift = new javax.swing.JLabel();
        benutzernametextfeld = new javax.swing.JTextField();
        passworttextfeld = new javax.swing.JPasswordField();
        loginbutton = new javax.swing.JButton();
        Resetbutton = new javax.swing.JButton();
        benutzernamelabel = new javax.swing.JLabel();
        passwortlabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        hintergrund.setBackground(new java.awt.Color(153, 153, 153));

        loginfenster.setBackground(new java.awt.Color(50, 50, 50));

        Ueberschrift.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        Ueberschrift.setForeground(new java.awt.Color(255, 255, 255));
        Ueberschrift.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ueberschrift.setText("Login");

        benutzernametextfeld.setBorder(null);
        benutzernametextfeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benutzernametextfeldActionPerformed(evt);
            }
        });

        passworttextfeld.setBorder(null);
        passworttextfeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passworttextfeldActionPerformed(evt);
            }
        });

        loginbutton.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        loginbutton.setText("Login");
        loginbutton.setBorder(null);
        loginbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    loginbuttonActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        Resetbutton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Resetbutton.setText("Reset");
        Resetbutton.setBorder(null);
        Resetbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetbuttonActionPerformed(evt);
            }
        });

        benutzernamelabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        benutzernamelabel.setForeground(new java.awt.Color(255, 255, 255));
        benutzernamelabel.setText("Benutzername:");

        passwortlabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        passwortlabel.setForeground(new java.awt.Color(255, 255, 255));
        passwortlabel.setText("Passwort:");

        jComboBox1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deutsch", "English" }));
        jComboBox1.setBorder(null);

        javax.swing.GroupLayout loginfensterLayout = new javax.swing.GroupLayout(loginfenster);
        loginfenster.setLayout(loginfensterLayout);
        loginfensterLayout.setHorizontalGroup(
            loginfensterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginfensterLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(loginfensterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(benutzernamelabel)
                    .addComponent(passworttextfeld, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(loginbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(benutzernametextfeld)
                    .addComponent(passwortlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(loginfensterLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Resetbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(loginfensterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginfensterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Ueberschrift, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginfensterLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        loginfensterLayout.setVerticalGroup(
            loginfensterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginfensterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Ueberschrift)
                .addGap(23, 23, 23)
                .addComponent(benutzernamelabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(benutzernametextfeld, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwortlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passworttextfeld, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(loginbutton)
                .addGap(18, 18, 18)
                .addComponent(Resetbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout hintergrundLayout = new javax.swing.GroupLayout(hintergrund);
        hintergrund.setLayout(hintergrundLayout);
        hintergrundLayout.setHorizontalGroup(
            hintergrundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hintergrundLayout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(loginfenster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        hintergrundLayout.setVerticalGroup(
            hintergrundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hintergrundLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(loginfenster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hintergrund, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hintergrund, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void benutzernametextfeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benutzernametextfeldActionPerformed
        
    }//GEN-LAST:event_benutzernametextfeldActionPerformed

    private void passworttextfeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passworttextfeldActionPerformed
        
    }//GEN-LAST:event_passworttextfeldActionPerformed

    private void loginbuttonActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_loginbuttonActionPerformed
        String StandardPW = "start";
        LocalDate DateAktuell = LocalDate.now();
        int jahr = DateAktuell.getYear();
        //,jahr+"-11-01"
        String [] Feiertage = {jahr+"-12-25",jahr+"-12-26",jahr+"-01-01",jahr+"-01-06",jahr+"-04-07",jahr+"-04-09",jahr+"-04-10",jahr+"-05-01",jahr+"-05-18",jahr+"-05-29",jahr+"-06-08",jahr+"-10-03"};
        String DatumAktuell = ""+DateAktuell;

        int Wochentag = DateAktuell.getDayOfWeek().getValue();
        boolean Feiertaggefunden = false;
        for(int i = 0; i<Feiertage.length; i++) {
            String DatumFeiertage = Feiertage[i];
            if(DatumAktuell.equals(DatumFeiertage)) {
                Feiertaggefunden = true;
                break;}
        }
        if((Wochentag == 6 || Wochentag == 7) || Feiertaggefunden == true ) {
            JOptionPane.showMessageDialog(null, "Wir haben das Tool an Wochenenden und Feiertagem gesperrt. Verbringen Sie Zeit mir Ihrer Familie.");
        }
        else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fallstudie", "root", "");
                username = benutzernametextfeld.getText();
                String sql = "Select * from login_daten_mitarbeiter where Mitarbeiter_ID=? and Passwort=?";
                java.sql.PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, benutzernametextfeld.getText());
                pst.setString(2, passworttextfeld.getText());
                ResultSet rs = pst.executeQuery();

                String sql1PW = "Select Passwort from login_daten_mitarbeiter where Mitarbeiter_ID='"+Login.username+"';";
                java.sql.PreparedStatement pst1 = con.prepareStatement(sql1PW);
                ResultSet rs1 = pst1.executeQuery();
                rs1.next();
                String pw = rs1.getString(1);
                System.out.println(pw);


                if(pw.equals("")&&passworttextfeld.getText().equals(StandardPW)) {
                    String sql3 = "Update login_daten_mitarbeiter set Passwort = 'start'where Mitarbeiter_ID= '"+Login.username+"';";
                    java.sql.PreparedStatement pst3 = con.prepareStatement(sql3);
                    pst3.executeUpdate(sql3);
                    JOptionPane.showMessageDialog(null, "Standardpasswort zurückgesetzt, geben Sie nun Ihr eigenes Passwort ein.");
                    passworttextfeld.setText("");
                    System.out.println("Ich bin hier");

                }else if(pw.equals("start") && !passworttextfeld.getText().equals(StandardPW)) {
                    boolean PWPruef = passwortPruefen(passworttextfeld.getText());
                    if(PWPruef) {
                        String sql2 = "Update login_daten_mitarbeiter set Passwort = '"+passworttextfeld.getText()+"'where Mitarbeiter_ID= '"+Login.username+"';";
                        java.sql.PreparedStatement pst2 = con.prepareStatement(sql2);
                        pst2.executeUpdate(sql2);
                        JOptionPane.showMessageDialog(null, "Login erfolgreich");
                        new Home().setVisible(true);
                        dispose();
                        System.out.println("Ich bin jz hier");
                    }


                }else if (!pw.equals(StandardPW) && pw.equals(passworttextfeld.getText())) {
                    JOptionPane.showMessageDialog(null, "Login erfolgreich");
                    new Home().setVisible(true);
                    dispose();
                }
                else {
                    JOptionPane.showMessageDialog(null, "Login fehlgeschlagen");
                    benutzernametextfeld.setText("");
                    passworttextfeld.setText("");
                }
                con.close();

            }
            catch(Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Login fehlgeschlagen1");
            }
        }

        txtDateierstellen();



    }//GEN-LAST:event_loginbuttonActionPerformed

    private void ResetbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetbuttonActionPerformed
            benutzernametextfeld.setText("");        
            passworttextfeld.setText("");
    }//GEN-LAST:event_ResetbuttonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }
    public static boolean passwortPruefen(String passwort) {
        System.out.println(passwort);
        int MIN_Uppercase = 0;
        int MIN_Lowercase = 0;
        int NUM_Digits = 0;
        int uppercaseCounter=0;
        int lowercaseCounter=0;
        int digitCounter = 0;
        int MAX=8;
        for (int i=0; i < passwort.length(); i++ ) {
            char c = passwort.charAt(i);
            if(Character.isUpperCase(c))
                uppercaseCounter++;
            else if(Character.isLowerCase(c))
                lowercaseCounter++;
            else if(Character.isDigit(c))
                digitCounter++;
        }
        if (passwort.length() >= MAX && uppercaseCounter >= MIN_Uppercase
                && lowercaseCounter >= MIN_Lowercase && digitCounter >= NUM_Digits) {
            return true;}
        JOptionPane.showMessageDialog(null, "Nicht gespeichert. Stellen Sie sicher, dass sie folgende Anforderungen erfüllen: \n "
                + "- mind. 8 Zeichen \n - mind. 1 Kleinbuchstabe \n - mind 1 Großbuchstabe \n - mind 1 Zahl");
        return false;
    }
    public static void eintragerstellenKrank()
    {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fallstudie", "root", "");
            LocalDate Datumaktuell = LocalDate.now();
            String DateAktuell = "" + Datumaktuell;
            Date deutschesAktuellDate = new Date();
            SimpleDateFormat formatdeutsch = new SimpleDateFormat("dd.MM.yyyy");
            SimpleDateFormat formatEnglisch = new SimpleDateFormat("yyyy-MM-dd");
            DateAktuell = "" + formatdeutsch.format(deutschesAktuellDate);
            String Datumausgabe = "" + formatEnglisch.format(deutschesAktuellDate);
            String anzahl = ("SELECT count(krank.Datum) FROM krank WHERE MitarbeiterID = '"+Login.username+"'");
            String suche = ("SELECT Datum FROM krank WHERE MitarbeiterID = '"+Login.username+"'");
            String Krank = ("SELECT `Tage` FROM abwesendheit WHERE MitarbeiterID = '" +Login.username+"' AND Grund = 'Krank';");
            java.sql.PreparedStatement pst10 = con.prepareStatement(anzahl);
            java.sql.PreparedStatement pst9 = con.prepareStatement(suche);
            java.sql.PreparedStatement pst69 = con.prepareStatement(Krank);
            ResultSet rs6 = pst9.executeQuery();
            ResultSet rs10 = pst10.executeQuery();
            ResultSet rs69  = pst69.executeQuery();
            rs69.next();
            int tage = rs69.getInt(1);
            System.err.println("gtdsfffffffffffffffffffffffffff"+tage);
            rs10.next();
            int e = rs10.getInt(1);
            int i = 0;
            int t = 0;
            String [] Datumarr = new String[e];
            while(rs6.next())
            {
                String Datum = rs6.getString(1);
                Datumarr[i] = Datum;
                i++;
            }
            for (int c=0;c<Datumarr.length;c++)
            {
                if(Datumarr[c].equals(DateAktuell))
                {
                    System.err.println("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"+Datumarr[c]);
                }
                else
                {
                    if(tage == t) {

                        t=0;
                        String letztedatum = ("SELECT MAX(DATUM) FROM `krank` WHERE MitarbeiterID = '"+Login.username+"'");
                        java.sql.PreparedStatement pst98 = con.prepareStatement(letztedatum);
                        ResultSet rs98= pst98.executeQuery();
                        String datum = rs98.getString(1);
                        String delete =("DELETE FROM `abwesendheit` WHERE MitarbeiterID = '"+Login.username+"'AND Ende = '"+datum+"' AND Grund = 'Krank'");
                        java.sql.PreparedStatement pst5 = con.prepareStatement(delete);
                        pst5.executeUpdate();
                    }
                    else {
                        String eingabe = ("INSERT INTO `krank`(`MitarbeiterID`, `Datum`, `Beginn`, `Pause`, `Ende`, `Art`, `Saldo`) VALUES ('" + Login.username + "','" + DateAktuell + "','00:00','0,0','00:00','Urlaub','0')");
                        System.err.println("hfjdsgfhdsjkfgdshfjsdgfhdsjfsd"+eingabe);
                        java.sql.PreparedStatement pst7 = con.prepareStatement(eingabe);
                        pst7.executeUpdate();
                        t++;
                    }
                }
            }
        }catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    public static void eintragerstellenUrlaub()
    {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fallstudie", "root", "");
            LocalDate Datumaktuell = LocalDate.now();
            String DateAktuell = "" + Datumaktuell;
            Date deutschesAktuellDate = new Date();
            SimpleDateFormat formatdeutsch = new SimpleDateFormat("dd.MM.yyyy");
            SimpleDateFormat formatEnglisch = new SimpleDateFormat("yyyy-MM-dd");
            DateAktuell = "" + formatdeutsch.format(deutschesAktuellDate);
            String Datumausgabe = "" + formatEnglisch.format(deutschesAktuellDate);
            String anzahl = ("SELECT count(Datum) FROM urlaubeintrag WHERE MitarbeiterID = '"+Login.username+"'");
            String suche = ("SELECT Datum FROM urlaubeintrag WHERE MitarbeiterID = '"+Login.username+"'");
            String Urlaub = ("SELECT `Tage` FROM abwesendheit WHERE MitarbeiterID = '" + Login.username +"' AND Grund = 'Urlaub'");
            java.sql.PreparedStatement pst11 = con.prepareStatement(anzahl);
            java.sql.PreparedStatement pst8 = con.prepareStatement(suche);
            java.sql.PreparedStatement pst68 = con.prepareStatement(Urlaub);
            ResultSet rs11 = pst11.executeQuery();
            ResultSet rs8 = pst8.executeQuery();
            ResultSet rs68  = pst68.executeQuery();
            rs68.next();
            int tage = rs68.getInt(1);
            rs11.next();
            int e = rs11.getInt(1);
            int i = 0;
            int t = 0;
            String [] Datumarr = new String[e];
            while(rs8.next())
            {
                String Datum = rs8.getString(1);
                Datumarr[i] = Datum;
                i++;
            }
            for (int c=0;c<Datumarr.length;c++)
            {
                if(Datumarr[c].equals(DateAktuell))
                {
                    System.err.println(Datumarr[c]);
                }
                else
                {
                    if(tage == t) {
                    t=0;
                    String letztedatum = ("SELECT MAX(DATUM) FROM `urlaubeintrag` WHERE MitarbeiterID = '"+Login.username+"'");
                    java.sql.PreparedStatement pst98 = con.prepareStatement(letztedatum);
                    ResultSet rs98= pst98.executeQuery();
                    String datum = rs98.getString(1);
                    String delete =("DELETE FROM `abwesendheit` WHERE MitarbeiterID = '"+Login.username+"'AND Ende = '"+datum+"'AND Grund = 'Krank'");
                    java.sql.PreparedStatement pst5 = con.prepareStatement(delete);
                    pst5.executeUpdate();
                    }
                    else {
                        String eingabe = ("INSERT INTO `urlaubeintrag`(`MitarbeiterID`, `Datum`, `Beginn`, `Pause`, `Ende`, `Art`, `Saldo`) VALUES ('" + Login.username + "','" + DateAktuell + "','00:00','0,0','00:00','Urlaub','0')");
                        java.sql.PreparedStatement pst7 = con.prepareStatement(eingabe);
                        pst7.executeUpdate();
                        t++;
                    }
                }
            }
        }catch (SQLException e)
        {
            e.printStackTrace();
        }

    }
    public static void txtDateierstellen()
    {
        eintragerstellenKrank();
        eintragerstellenUrlaub();

        Calendar calendar = new GregorianCalendar();
        int tag =calendar.get(Calendar.DAY_OF_WEEK);
        LocalDate Datumaktuell = LocalDate.now();
        String DateAktuell = ""+Datumaktuell;
        Date deutschesAktuellDate = new Date();
        SimpleDateFormat formatdeutsch = new SimpleDateFormat("dd.MM.yyyy");
        SimpleDateFormat formatEnglisch = new SimpleDateFormat("yyyy-MM-dd");
        DateAktuell = ""+formatdeutsch.format(deutschesAktuellDate);
        String Datumausgabe = ""+formatEnglisch.format(deutschesAktuellDate);
        if(tag == 1 || tag == 7)
        {
            JOptionPane.showMessageDialog(null, "Heute ist Wochenende. Es werden keine Eintraege erzeugt.");
        }
        else {
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fallstudie", "root", "");
                String Ausgabe = ("SELECT `Mitarbeiter_ID`, `Datum`, `Beginn`, `Pause`, `Ende`, `Art`, `Saldo` FROM eintraege WHERE Mitarbeiter_ID = '" + Login.username + "'");
                String Urlaub = ("SELECT `Beginn`, `Ende`, `Tage`, `Grund` FROM abwesendheit WHERE MitarbeiterID = '" + Login.username +"' AND Datum = '"+DateAktuell+"'");
                java.sql.PreparedStatement pst = con.prepareStatement(Ausgabe);
                java.sql.PreparedStatement pst2 = con.prepareStatement(Urlaub);
                ResultSet rs = pst.executeQuery();
                ResultSet rs2 = pst2.executeQuery();
                rs.next();
                rs2.next();
                String Wert = rs.getString(1);
                String Grund = rs2.getString(4);
                String Beginn = rs2.getString(1);
                String Ende = rs2.getString(2);
                File datei = new File("Eintraege.txt");
                FileWriter writer = new FileWriter(datei);
                System.err.println(Grund);
                System.err.println(DateAktuell);
                writer.write("ID\t");
                writer.write("Datum\t \t");
                writer.write("Beginn\t");
                writer.write("Pause\t");
                writer.write("Ende\t");
                writer.write("Art\t");
                writer.write("Saldo\n");
                writer.write("---------------------------------------------------------------- \n");
                writer.write(rs.getString(1) + "\t");
                writer.write(rs.getString(2) + "\t");
                writer.write(rs.getString(3) + "\t");
                writer.write(rs.getString(4) + "\t");
                writer.write(rs.getString(5) + "\t");
                writer.write(rs.getString(6) + "\t");
                writer.write(rs.getFloat(7) + "Std.\n");


                while (rs.next()) {

                    writer.write(rs.getString(1) + "\t");
                    writer.write(rs.getString(2) + "\t");
                    writer.write(rs.getString(3) + "\t");
                    writer.write(rs.getString(4) + "\t");
                    writer.write(rs.getString(5) + "\t");
                    writer.write(rs.getString(6) + "\t");
                    writer.write(rs.getFloat(7) + "Std.\n");

                }
                if(Grund.equals("Urlaub") && Beginn.equals(DateAktuell))
                {
                    String Urlaubeintrag = ("SELECT * FROM urlaubeintrag WHERE MitarbeiterID = '"+Login.username+"' AND Datum = '"+DateAktuell+"'");
                    java.sql.PreparedStatement pst33 = con.prepareStatement(Urlaubeintrag);
                    ResultSet rs33 = pst33.executeQuery();
                    rs33.next();
                    writer.write(rs33.getString(1)+ "\t");
                    writer.write(rs33.getString(2)+ "\t");
                    writer.write(rs33.getString(3)+ "\t");
                    writer.write(rs33.getString(4)+ "\t");
                    writer.write(rs33.getString(5)+ "\t");
                    writer.write(rs33.getString(6)+ "\t");
                    writer.write(rs33.getString(7)+ "\n");
                } else if (Grund.equals("Urlaub")) {
                    String Urlaubeintrag = ("SELECT * FROM urlaubeintrag WHERE MitarbeiterID = '"+Login.username+"'");
                    java.sql.PreparedStatement pst33 = con.prepareStatement(Urlaubeintrag);
                    ResultSet rs33 = pst33.executeQuery();
                    rs33.next();
                    writer.write(rs33.getString(1)+ "\t");
                    writer.write(rs33.getString(2)+ "\t");
                    writer.write(rs33.getString(3)+ "\t");
                    writer.write(rs33.getString(4)+ "\t");
                    writer.write(rs33.getString(5)+ "\t");
                    writer.write(rs33.getString(6)+ "\t");
                    writer.write(rs33.getString(7)+ "\n");

                    while(rs33.next())
                    {
                        writer.write(rs33.getString(1)+ "\t");
                        writer.write(rs33.getString(2)+ "\t");
                        writer.write(rs33.getString(3)+ "\t");
                        writer.write(rs33.getString(4)+ "\t");
                        writer.write(rs33.getString(5)+ "\t");
                        writer.write(rs33.getString(6)+ "\t");
                        writer.write(rs33.getString(7)+ "\n");
                    }
                }
                if(Grund.equals("Krank") && Beginn.equals(DateAktuell))
                {
                    String krank = ("SELECT * FROM krank WHERE MitarbeiterID = '"+Login.username+"' AND Datum = '"+DateAktuell+"'");
                    java.sql.PreparedStatement pst34 = con.prepareStatement(krank);
                    ResultSet rs34 = pst34.executeQuery();
                    rs34.next();
                    writer.write(rs34.getString(1)+ "\t");
                    writer.write(rs34.getString(2)+ "\t");
                    writer.write(rs34.getString(3)+ "\t");
                    writer.write(rs34.getString(4)+ "\t");
                    writer.write(rs34.getString(5)+ "\t");
                    writer.write(rs34.getString(6)+ "\t");
                    writer.write(rs34.getString(7)+ "\n");
                } else if (Grund.equals("Krank")) {
                    String krank = ("SELECT * FROM krank WHERE MitarbeiterID = '"+Login.username+"'");
                    java.sql.PreparedStatement pst33 = con.prepareStatement(krank);
                    ResultSet rs35 = pst33.executeQuery();
                    rs35.next();
                    writer.write(rs35.getString(1)+ "\t");
                    writer.write(rs35.getString(2)+ "\t");
                    writer.write(rs35.getString(3)+ "\t");
                    writer.write(rs35.getString(4)+ "\t");
                    writer.write(rs35.getString(5)+ "\t");
                    writer.write(rs35.getString(6)+ "\t");
                    writer.write(rs35.getString(7)+ "\n");

                    while(rs35.next())
                    {
                        writer.write(rs35.getString(1)+ "\t");
                        writer.write(rs35.getString(2)+ "\t");
                        writer.write(rs35.getString(3)+ "\t");
                        writer.write(rs35.getString(4)+ "\t");
                        writer.write(rs35.getString(5)+ "\t");
                        writer.write(rs35.getString(6)+ "\t");
                        writer.write(rs35.getString(7)+ "\n");
                    }
                }
                writer.flush();
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Resetbutton;
    private javax.swing.JLabel benutzernamelabel;
    private javax.swing.JTextField benutzernametextfeld;
    private javax.swing.JPanel hintergrund;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JButton loginbutton;
    private Komponenten.RundesPanel loginfenster;
    private javax.swing.JLabel passwortlabel;
    private javax.swing.JPasswordField passworttextfeld;
    private javax.swing.JLabel Ueberschrift;
    // End of variables declaration//GEN-END:variables
}
